<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:cache="http://www.springframework.org/schema/cache"  
	xsi:schemaLocation="
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx.xsd
    http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/cache
    http://www.springframework.org/schema/cache/spring-cache.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop.xsd"
     default-lazy-init="true">
     
    <description>Spring公共配置 </description>

	<!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->
	<context:component-scan base-package="com.sharp" scoped-proxy="targetClass" />
     
    <!--读取数据库配置文件-->
     <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"> 
	    <property name="locations">
				<list>
					<value>classpath:application.properties</value>
					<value>classpath:jdbc.properties</value>
					<value>classpath:log4j.properties</value>
				</list>
			</property>
	</bean>
	<bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
		<!--慢SQL记录,参数可配置 -->
		<property name="slowSqlMillis" value="10000" />
		<property name="logSlowSql" value="true" />
		<!-- StatFilter合并的功能 -->
		<property name="mergeSql" value="true" />
	</bean>
	<bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter">
		<property name="statementExecutableSqlLogEnable" value="true" />
		<property name="resultSetLogEnabled" value="false" />
	</bean> 
	<!-- 配置数据源  采用目前性能最高的Druid连接池     参考: https://github.com/alibaba/druid/wiki/配置_DruidDataSource参考配置 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
		
	 	<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${jdbc.initial.size}" />
		<property name="minIdle" value="${jdbc.min.idle}" />
		<property name="maxActive" value="${jdbc.max.active}" />
		
        <!-- 由外部事务管理器处理提交 -->
		<property name="defaultAutoCommit" value="false" />
		
         <!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />
		
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		
		<!-- 合并多个DruidDataSource的监控数据 -->
		<property name="useGlobalDataSourceStat" value="true" />
		
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

           <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="false" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
		
		 <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
		<property name="proxyFilters">
			<list>
				<ref bean="stat-filter" />
				<ref bean="log-filter" />
			</list>
		</property>
	</bean>
	
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
    	<property name="dataSource" ref="dataSource" />  
	</bean> 
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"></property>
	</bean> 
    <!--启动spring注解功能 -->
   <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
   
 	<!--该Bean是一个org.springframework.cache.CacheManager对象属性cacheManager是一个net.sf.ehcache.CacheManager对象 -->
	
	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
		<property name="cacheManager" ref="ehcache" />
	</bean>
	<bean id="ehcache" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="classpath:ehcache-config.xml" />
		<property name="shared" value="true" />
		<property name="cacheManagerName" value="springsharp_cache_v${build.version}" />
	</bean>

	<!-- Spring Cache配置 -->
	<cache:annotation-driven />

</beans>
